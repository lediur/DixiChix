SEE https://docs.google.com/document/d/1F3S41MT_h7jr4mtw7uqHxf3xyXsWsqcx34gHzfdwNTE/edit FOR FULL DOCUMENT WITH SCHEMATICS


Hey New Hire!

Welcome to the Dixi Chix! As you probably already know, one of the core components of our product is our iOS application, Osprey. The application allows our users to choose the points that they want to be filmed at and to share and view their footage after the drive. In order to get you up to speed with Osprey, you should follow the steps and guidelines below. But first, let’s give you a quick overview of our stack as well as the application.

Stack:



Osprey is written in Swift and uses storyboarding to setup the layout of the app. We chose Swift because it is lightweight and will be the future of iOS programming. We also use storyboarding because we wanted to keep our app simple and easy to navigate so that it would not detract from the user experience of racing cars.
We use the HockeyApp SDK in order to distribute new versions of the app to our users. Although the final goal is to push Osprey to the App Store, we have to make sure that all communications with the drone are working properly, so this SDK helps us quickly make distributions to iterate faster.
Osprey uses the Google Maps API to allow users to track their current location, to choose the points where they want to be filmed, and to communicate those coordinates to the drone.
The app uses private YouTube accounts to store the videos and to share and view them within the app without having to store the entire file.
The application communicates with the drone via our Parse database. The database is very simple and consists of a User model, with a username and hashed password, as well as a DrivingLocation model for each individual race event. This model contains the current location of the car, which is continuously updated as the car is moving, as well as the locations where the user has requested that footage be taken. These locations are sorted on the iOS side for now in order to capture the maximum amount of footage while still ensuring that the drone will not run out of battery mid-flight. For access to the GUI for the parse database, contact rchan2@stanford.edu.
In order to work productively as a team, we use a Github Repository. We have a number of different branches, both active and archived, that are used by different members of the team for different purposes. On the iOS side, the best practice that we have used is to pull down the latest commits from “master” and then to branch off of that. Typically you want to create a branch name that reflects what your goal is. When you have completed your task, you can merge back with master to show off your work to the team.
We also use a product management board, Trello, in order to keep on top of our tasks. The “iOS App” tab will be your main resource concerning the Osprey tasks, and you should frequently check here for any updates or comments on your assignments as well as to keep track of any upcoming deadlines.


Getting Started:
In order to start working on Osprey, you have to first request that one of our team members adds you as a Collaborator on our repository. Send an email with this request to: tfallon5@stanford.edu.
Once you have been granted access to the repository, you should use the command: ‘git clone https://github.com/cs210/DixiChix.git’ in order to clone a local copy of the repository to your computer. Enter your github account credentials when prompted.
Before moving to open the project, make a local branch with the ‘git checkout -b <branch_name>’ command, where you insert what you want your branch name to be in <branch_name>.
Once the repository has been cloned and you have a clean branch, you will want to be working our ‘osprey-drones-app-updated’ folder, as this will contain the XCode project for Osprey. Open up that folder, and double click on the XCode project to open it.
Once you have opened the project, you will notice that there are not too many files to worry about. Below is a list of the functionality of the files in the Osprey Drones folder that you will be using. You should run the app and click along with the order of the files (each is pictured below its description) in order to get a better sense of how the app is structured.
AppDelegate.swift - This sets up our application and initializes the APIs and SDKs that we will use in the app.
Main.storyboard - This file is where we layout the views of the various pages that you will see in the app.
ViewController.swift - This file is the first view controller that you will see on the screen. It is a navigation view controller with five different buttons on it that will take users to various places in the app.




GoogleMapsViewController.swift - When the user presses “Start” on the first view controller, this is the screen that will enter. It uses the Google Maps SDK to render a map based on the current location of the user. The user can then press to add points to the map and also to delete points from the map. This file works in conjunction with the CoordPair.swift class to track all of the coordinates placed by the user so that we can send the drone to those points.
		




DrivingViewController.swift - When the user presses “Done” after placing their points, we have this simple view controller appear in order to track the user’s position while driving and to order the coordinates at which the drone should appear in order to maximize the number of points the drone can reach. This is done using a variation of the solution to the Travelling Salesman Problem that takes into account the speeds of the drone and car and the life of the drone.





VideoResultsViewController.swift - When completed, you will move into the view controller of the video results (Note: you can also reach this screen from the home screen by clicking “Videos”). The results are each loaded into a table as a VideoResultCell.swift and they are organized on a most recent first basis. To view any particular video, you should click on its cell.





VideoPlayerViewController.swift - This view controller contains a YTPlayerView to allow YouTube videos to played from within the application. If you click on the video, you will expand into the typical iOS video screen and the video will start playing. Otherwise, on this screen, you can click to share to Facebook or Twitter, which will bring up the iOS social module, or to copy the YouTube link in order to send the link to your friends via text or email.



The rest of the View Controllers are used to reflect the other buttons that exist on the launch screen. They are merely for utility, such as logging in, signing up, and logging out, and also give some description about our application and its functions. It is probably best to leave these alone unless you have any specific fixes that you think would be beneficial, as these are pretty standard functions.
